#version 330 core

const int MAX_LIGHTS = 5;

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace[MAX_LIGHTS];

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;

// Light attributes
uniform vec3 LightPosition_worldspace[MAX_LIGHTS];
uniform vec3 LightColor[MAX_LIGHTS];
uniform float LightPower[MAX_LIGHTS];

void main(){
	
	// Material properties
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);

	vec3 finalColor = MaterialAmbientColor;

	for (int i = 0; i < MAX_LIGHTS; i++)
	{
        // Distance to the light
        float distance = length(LightPosition_worldspace[i] - Position_worldspace);

        // Direction of the light (from the fragment to the light)
       	vec3 l = normalize( LightDirection_cameraspace[i] );
       	// Cosine of the angle between the normal and the light direction,
       	// clamped above 0
       	//  - light is at the vertical of the triangle -> 1
       	//  - light is perpendicular to the triangle -> 0
       	//  - light is behind the triangle -> 0
       	float cosTheta = clamp( dot( n,l ), 0,1 );

       	// Direction in which the triangle reflects the light
        vec3 R = reflect(-l,n);
       	// Cosine of the angle between the Eye vector and the Reflect vector,
       	// clamped to 0
       	//  - Looking into the reflection -> 1
       	//  - Looking elsewhere -> < 1
       	float cosAlpha = clamp( dot( E,R ), 0,1 );

        // Accumulate contribution from this light source
        finalColor +=
            MaterialDiffuseColor * LightColor[i] * LightPower[i] * cosTheta / (distance * distance) +
            MaterialSpecularColor * LightColor[i] * LightPower[i] * pow(cosAlpha, 5) / (distance * distance);
    }
	color = finalColor;

}